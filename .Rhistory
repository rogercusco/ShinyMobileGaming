levels=.95, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5),
center.pch=0)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=.95, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
#,center.pch=0
)
?dataEllipse
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=1, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
#,center.pch=0
)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=1, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
,center.pch=0
)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=1, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
,center.pch=0
)
2+2
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=1, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
,center.pch=0
)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=1, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
#,center.pch=0
)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=.99, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
,center.pch=0
)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=.9999999, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
,center.pch=0
)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
dataEllipse(x = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000) ,
y = as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000),
levels=.99, add=TRUE, plot.points=FALSE,
col=adjustcolor("#9C489E", alpha.f=0.5)
,center.pch=0
)
library(MASS)
library(cluster)
plot_min_ellipse <- function(xy, points_in_ellipse, color = "blue") {
fit <- cov.rob(xy, quantile.used = points_in_ellipse, method = "mve")
best_ellipse <- ellipsoidhull( xy[fit$best,] )
lines(predict(best_ellipse), col=color)
}
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = length(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)))
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
p <- plot_ly(economics,
type = "scatter",       # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = 'date',               # more about scatter's "x": /r/reference/#scatter-x
y = 'uempmed',            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",  # more about scatter's "name": /r/reference/#scatter-name
marker = list(          # marker is a named list, valid keys: /r/reference/#scatter-marker
color="rgb(16, 32, 77)"     # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p <- plot_ly(economics,
type = "scatter",       # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = 'date',               # more about scatter's "x": /r/reference/#scatter-x
y = 'uempmed',            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",  # more about scatter's "name": /r/reference/#scatter-name
marker = list(          # marker is a named list, valid keys: /r/reference/#scatter-marker
color="rgb(16, 32, 77)"     # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p <- plot_ly(economics,
type = "scatter",       # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = 'date',               # more about scatter's "x": /r/reference/#scatter-x
y = 'uempmed',            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",  # more about scatter's "name": /r/reference/#scatter-name
marker = list(          # marker is a named list, valid keys: /r/reference/#scatter-marker
color="rgb(16, 32, 77)"     # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(df, x = Grossings, y = Downloads, color=df$RPG,
text = paste("Category: ", df$Category),
mode = "markers")
plot_ly(df, x = 2, y = 3, color=df$RPG,
text = paste("Category: ", df$Category),
mode = "markers")
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0.4)),
pch=21)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
points(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$Category == 'Puzzle', adjustcolor('red',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
bg= ifelse(df$Category == 'Puzzle', adjustcolor('red',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
points(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$Category == 'Strategy', adjustcolor('red',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
bg= ifelse(df$Category == 'Strategy', adjustcolor('red',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
points(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
bg= ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
table(df$Category)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('white',alpha.f=0)),
pch=21)
# points(df$Grossings/1000000, df$Downloads / 1000000,
#        col=ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        bg= ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        pch=21)
library(MASS)
library(cluster)
plot_min_ellipse <- function(xy, points_in_ellipse, color = "blue") {
fit <- cov.rob(xy, quantile.used = points_in_ellipse, method = "mve")
best_ellipse <- ellipsoidhull( xy[fit$best,] )
lines(predict(best_ellipse), col=color)
}
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0)),
pch=21)
# points(df$Grossings/1000000, df$Downloads / 1000000,
#        col=ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        bg= ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        pch=21)
library(MASS)
library(cluster)
plot_min_ellipse <- function(xy, points_in_ellipse, color = "blue") {
fit <- cov.rob(xy, quantile.used = points_in_ellipse, method = "mve")
best_ellipse <- ellipsoidhull( xy[fit$best,] )
lines(predict(best_ellipse), col=color)
}
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
# points(df$Grossings/1000000, df$Downloads / 1000000,
#        col=ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        bg= ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        pch=21)
library(MASS)
library(cluster)
plot_min_ellipse <- function(xy, points_in_ellipse, color = "blue") {
fit <- cov.rob(xy, quantile.used = points_in_ellipse, method = "mve")
best_ellipse <- ellipsoidhull( xy[fit$best,] )
lines(predict(best_ellipse), col=color)
}
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
down <- read.csv("down.csv", sep=';')
gross <- read.csv("gross.csv", sep=';')
down_2016 <- down[down$Year == 2016,]
gross_2016 <- gross[gross$Year == 2016,]
down_by_game <- tapply(down_2016$Value, down_2016$Common.Name, sum)
gross_by_game <- tapply(gross_2016$Value, gross_2016$Common.Name, sum)
down_by_game <- down_by_game[!is.na(down_by_game)]
gross_by_game <- gross_by_game[!is.na(gross_by_game)]
rank_gross <- gross_by_game[order(gross_by_game, decreasing = TRUE)][1:300]
gross_df <- data.frame(Game = names(rank_gross), Grossings = unname(rank_gross))
down_df <- data.frame(Game = names(down_by_game), Downloads = unname(down_by_game))
join <- merge(x = gross_df, y = down_df, by = "Game", all.x = TRUE)
cheatsheet <- gross_2016[,c("Category", "Common.Name")]
colnames(cheatsheet) <- c("Category", "Game")
joined <- merge(x = join, y = cheatsheet, by = "Game", all.x = TRUE)
df <- unique(joined)
df <- df[!is.na(df$Downloads),]
df <- df[df$Category != "Casino",]
df$RPG <- df$Category == "RPG"
df$Simulation <- df$Category == "Simulation"
df$Strategy <- df$Strategy == "Strategy"
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
# points(df$Grossings/1000000, df$Downloads / 1000000,
#        col=ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        bg= ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        pch=21)
library(MASS)
library(cluster)
plot_min_ellipse <- function(xy, points_in_ellipse, color = "blue") {
fit <- cov.rob(xy, quantile.used = points_in_ellipse, method = "mve")
best_ellipse <- ellipsoidhull( xy[fit$best,] )
lines(predict(best_ellipse), col=color)
}
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
p <- plot_ly(economics,
type = "scatter",       # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = 'date',               # more about scatter's "x": /r/reference/#scatter-x
y = 'uempmed',            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",  # more about scatter's "name": /r/reference/#scatter-name
marker = list(          # marker is a named list, valid keys: /r/reference/#scatter-marker
color="rgb(16, 32, 77)"     # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p
library(plotly)
p <- plot_ly(economics,
type = "scatter",       # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = 'date',               # more about scatter's "x": /r/reference/#scatter-x
y = 'uempmed',            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",  # more about scatter's "name": /r/reference/#scatter-name
marker = list(          # marker is a named list, valid keys: /r/reference/#scatter-marker
color="rgb(16, 32, 77)"     # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
class(df)
class(d)
d <- diamonds[sample(nrow(diamonds), 1000), ]
attach(d)
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plot_ly(df, x = Grossings, y = Downloads, color=RPG,
text = paste("Category: ", Category),
mode = "markers")
attach(df)
plot_ly(df, x = Grossings, y = Downloads, color=RPG,
text = paste("Category: ", Category),
mode = "markers")
?plot_ly
attach(df)
plot_ly(df, x = Grossings, y = Downloads, color=RPG,
text = paste("Category: ", Category),
mode = "markers") %>%
layout(
xaxis = list(range = c(0, 100000000)),
yaxis = list(range = c(0, 20000000)))
attach(df)
plot_ly(df, x = Grossings, y = Downloads, color=RPG,
text = paste("Category: ", Category),
mode = "markers")
attach(df)
plot_ly(df, x = Grossings, y = Downloads, color=~RPG,
text = paste("Category: ", Category),
mode = "markers")
head(Df)
head(df)
rownames(df) <- NULL
attach(df)
plot_ly(df, x = Grossings, y = Downloads, color=~RPG,
text = paste("Category: ", Category),
mode = "markers") %>%
layout(
xaxis = list(range = c(0, 100000000)),
yaxis = list(range = c(0, 20000000)))
attach(df)
plot_ly(df,
type = "scatter",
x = Grossings, y = Downloads, color= ~RPG,
text = paste("Category: ", Category),
mode = "markers") %>%
layout(
xaxis = list(range = c(0, 100000000)),
yaxis = list(range = c(0, 20000000)))
plot(df$Grossings/1000000, df$Downloads / 1000000,
col=ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
ylab = 'Downloads', xlab = 'Grossing',
ylim=c(0,20), xlim=c(0,100),
bg= ifelse(df$RPG == TRUE, adjustcolor('blue',alpha.f=0.4),
adjustcolor('red',alpha.f=0.4)),
pch=21)
# points(df$Grossings/1000000, df$Downloads / 1000000,
#        col=ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        bg= ifelse(df$Category == 'Simulation', adjustcolor('red',alpha.f=0.4),
#                   adjustcolor('white',alpha.f=0)),
#        pch=21)
library(MASS)
library(cluster)
plot_min_ellipse <- function(xy, points_in_ellipse, color = "blue") {
fit <- cov.rob(xy, quantile.used = points_in_ellipse, method = "mve")
best_ellipse <- ellipsoidhull( xy[fit$best,] )
lines(predict(best_ellipse), col=color)
}
plot_min_ellipse(cbind(as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,2]/1000000),
as.vector(df[(df$RPG) &
df$Downloads/1000000 < 20 &
df$Grossings/1000000 < 100,3]/1000000)),
points_in_ellipse = 26)
head(df)
head(df[order(df$Grossings),])
tail(df[order(df$Grossings),])
rownames(df) <- NULL
tail(df[order(df$Grossings),])
df$rownumber = 1:nrow(df)
attach(df)
plot_ly(df,
type = "scatter",
x = Grossings, y = Downloads, color= ~RPG,
text = paste("Category: ", Category),
mode = "markers") %>%
layout(
xaxis = list(range = c(0, 100000000)),
yaxis = list(range = c(0, 20000000)))
head(df)
library(shiny)
library(shinydashboard)
library(plotly)
library(data.table)
install.packages("data.table")
library(data.table)
runApp('Documents/app')
runApp('Documents/app')
runApp('Documents/app')
runApp('Documents/app')
shiny::runApp('Documents/app')
shiny::runApp('Documents/app')
shiny::runApp('Documents/app')
runApp('Documents/app')
runApp('Documents/app')
